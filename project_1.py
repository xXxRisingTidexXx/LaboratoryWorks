"""
Проект №1
ІПЗ - 12, Петраківський Данило


The gallows

    It's a PvE game where player is to recognize the random word generated by AI. Player gradually
guess each letter. If recognition fails, AI complements the hanged man picture; if it's finished,
player loses. Unlimited attempts to play are available as well.
"""
from os import system, name
from time import sleep
from random import choice


def read_hanged_men():
    """
    Return the list of the hanged men states, used for word recognizing process display.
    """
    with open('res/hanged_men.txt') as file:
        return file.read().split('\n\n')


def read_dictionaries():
    """
    Read the list of the word dictionaries.
    """
    with open('res/dictionaries.txt') as file:
        return {line[:line.index(' ')]: line[line.index(' ') + 1:] for line in file.readlines()}


HANGED_MEN = read_hanged_men()
DICTIONARIES = read_dictionaries()
YES = 'так'
NO = 'ні'


class Word:
    """
    Word implementation, which stands for word choice and recognition.

    >>> Word().choice != ''
    True
    """
    choice = None
    letter_index = 0
    recognition = ''

    def __init__(self, chosen_word):
        self.choice = chosen_word

    def is_recognized(self):
        """
        Check if player has recognized the whole word.
        """
        return self.choice == self.recognition

    def check(self, letter):
        """
        Check if player has recognized a regular letter in the word.
        """
        check = self.choice[self.letter_index] == letter
        if check:
            self.recognition += letter
            self.letter_index += 1
        return check


class HangedMan:
    """
    Hanged man class, which stands for shape depicting and word recognition process display.

    >>> HangedMan().shape != ''
    True
    """
    index = 0
    shape = HANGED_MEN[index]

    def is_finished(self):
        """
        Check if all attempts to recognize the word are exhausted.
        """
        return self.shape == HANGED_MEN[len(HANGED_MEN) - 1]

    def complement(self):
        """
        Complement hanged man shape if letter isn't recognized.
        """
        self.index += 1
        self.shape = HANGED_MEN[self.index]


def start():
    """
    Main function which is program's entry point.

    >>> len(HANGED_MEN) >= 2
    True
    >>> len(DICTIONARIES) >= 1
    True
    """
    clear()
    print_intro()
    in_game = True
    while in_game:
        play()
        if read_decision() == NO:
            in_game = False
    clear()


def clear():
    """
    Clear console.
    """
    system('cls' if name == 'nt' else 'clear')


def print_intro():
    """
    Print intro.
    """
    with open('res/intro.txt') as file:
        print(file.read())
        press_enter()


def press_enter():
    """
    Servant function, similar to 'Press any key...'.
    """
    input('Натисніть Enter...')


def play():
    """
    Business logic function, where game process occurs.
    """
    dictionary = choice(list(DICTIONARIES.items()))
    word = Word(choice(dictionary[1]))
    hanged_man = HangedMan()
    make_time_delay()
    print_dictionary_name(dictionary[0])
    while not (hanged_man.is_finished() or word.is_recognized()):
        print_progress(hanged_man.shape, word.recognition)
        if not word.check(input_letter()):
            hanged_man.complement()
    print_results(hanged_man, word.recognition)


def make_time_delay():
    """
    Make time delay before word choice.
    """
    print('\nЗагадаується слово...')
    sleep(2)


def print_dictionary_name(dict_name):
    """
    Print chosen dictionary dict_name
    """
    print('Готово! Тема Вашого слова - {}\n'.format(dict_name))
    press_enter()
    clear()


def print_progress(shape, recognition):
    """
    Clear console, depict hanged man shape and recognized letters.
    """
    clear()
    print(shape)
    print('\n{}\n'.format(recognition))


def input_letter():
    """
    Input regular letter.
    """
    letter = input('Введіть літеру: ')
    return letter[0].lower() if letter != '' else 'a'


def print_results(hanged_man, recognition):
    """
    Print final shape, recognition and message as well.
    """
    print_progress(hanged_man.shape, recognition)
    print('ВИ ПРОГРАЛИ!\n' if hanged_man.is_finished() else 'ВИ ПЕРЕМОГЛИ!\n')


def read_decision():
    """
    Read player's decision regards game continuation.
    """
    while True:
        decision = input('Бажаєте зіграти ще одну гру?({}/{}): '.format(YES, NO))
        if decision == YES or decision == NO:
            return decision
        print('Некоректне введення; спробуйте ще.')


if __name__ == '__main__':
    start()
